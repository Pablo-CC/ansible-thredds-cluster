- name: Download virtualenv package
  local_action: get_url
  args:
    dest: "{{ tmp_dir }}"
    url: "{{ venv_file_url }}"
  vars:
    ansible_become: False
  run_once: True

- name: Create vitualenv directories
  file:
    dest: "{{ item }}"
    state: directory
  with_items:
    - "{{ venv_home }}"
    - "{{ venv_sw }}"
    
- name: Unarchive virtualenv
  unarchive: 
    src: "{{ tmp_dir }}/{{ venv_file_name }}"
    dest: "{{ venv_sw }}"

- name: Check if virtualenv is already created
  stat:
    path: "{{ venv_home }}/bin/activate"
  register: var_virtualenv_exists

- name: Create virtualenv if it has not been created before
  shell: "python virtualenv.py {{ venv_home }}"
  args:
    chdir: "{{ venv_sw }}/virtualenv-{{ venv_version }}"
  when: var_virtualenv_exists.stat.exists == false

- name: Install supervisord
  pip:
    name: supervisor
    virtualenv: "{{ venv_home }}"
    virtualenv_site_packages: no
  register: supervisor_install

- name: Create supervisord directories
  file:
    dest: "{{ item }}"
    state: directory
  with_items:
    - "{{ supervisord_etc }}"
    - "{{ supervisord_var }}"

- name: Create directory supervisord.d 
  file:
    dest: "{{ supervisord_programs }}"
    state: directory

- name: Create supervisord.conf
  template:
    src: supervisord.conf.j2
    dest: "{{ supervisord_etc }}/supervisord.conf"

- name: Check if supervisord is already running
  shell: netstat -tunlp | grep ":{{ supervisord_port }}"
  register: supervisor_sock
  failed_when: "'FAILED' in supervisor_sock.stderr"
  tags: boot

- name: Run supervisord
  shell: "{{ venv_home }}/bin/supervisord -c {{ supervisord_etc }}/supervisord.conf"
  tags: boot
  when: supervisor_sock.stdout == ""

