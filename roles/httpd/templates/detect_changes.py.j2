#!/usr/bin/env python

import sys
import hashlib
import os


def md5_file(directory):
    md5 = hashlib.md5()

    for root, dirs, files in os.walk(directory):
        for names in files:
                filepath = os.path.join(root,names)
                try:
                        f1 = open(filepath, 'rb')
                except:
                        f1.close()
                        continue
                while 1:
                        buf = f1.read()
                        if not buf : break
                        md5.update(hashlib.md5(buf).hexdigest())
                f1.close()

    return md5.hexdigest()

def define_hash(filename):
    if os.path.isfile(filename) == True:
        f = open(filename, "r")
        new_hash = md5_file(sys.argv[2])
        old_hash = f.read()
        f.close()
        if new_hash != old_hash:
            f = open(filename, "w")
            f.write (new_hash)
            f.close()
            write_stderr('Hash has changed\n')
            hash_changed = True
        else:
            write_stderr('Hash has not changed\n')
            hash_changed = False
    else:
        f = open(filename,"w")
        new_hash = md5_file(sys.argv[2])
        f.write (new_hash)
        f.close()
        write_stderr('New hash has been created\n')
        hash_changed = False
    return hash_changed

def write_stdout(s):
    sys.stdout.write(s)
    sys.stdout.flush()

def write_stderr(s):
    sys.stderr.write(s)
    sys.stderr.flush()

def main():
    
    # transition from ACKNOWLEDGED to READY
    write_stdout('READY\n')

    # read header line and print it to stderr
    line = sys.stdin.readline()
    write_stderr(line)

    check_hash = define_hash(sys.argv[1])
    if check_hash == True:
            os.system("{{ httpd_opt }}/bin/apachectl -k graceful")

    write_stdout('RESULT 2\nOK')

if __name__ == '__main__':
    main()