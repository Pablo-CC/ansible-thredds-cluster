#Check if the service is installed in remote host
- name: Check if the service is installed
  include: "{{ httpd_path_to_lib_role }}/lib/tasks/check_service_install.yml"
  vars:
    service_home: "{{ httpd_install_base }}"

- name: Start installation if httpd is not installed
  include: install_httpd.yml
  when: service_name not in service_installed.stdout

- name: Insert HTTPD_HOME in .bashrc file
  lineinfile:
    dest: "~/.bashrc"
    line: "export HTTPD_HOME={{ httpd_opt }}"

# Create conf.d directory in httpd_home
- name: Create modules directories
  file:
    dest: "{{ httpd_opt }}/{{ conf_modules }}"
    state: directory

# Create password for admin user
- name: Create password for mod_jk status web page
  htpasswd:
    path: "{{ httpd_opt }}/.htpasswd"
    name: "{{ user }}"
    password: "{{ password }}"

# Create jk configuration file in http configuration
- name: Configure jk module
  template:
    src: mod_jk.conf.j2
    dest: "{{ httpd_opt }}/conf.d/mod_jk.conf"

# Create general worker.properties configuration file for mod_jk in httpd configuration
- name: Configure general worker properties
  template:
    src: mod_jk.workers.j2
    dest: "{{ httpd_opt }}/conf.d/mod_jk.workers"

# Create general worker.properties configuration file for mod_jk in httpd configuration
- name: Configure mod_jk urimaps
  template:
    src: mod_jk.urimaps.j2
    dest: "{{ httpd_opt }}/conf.d/mod_jk.urimaps"

# Create httpd configuration
- name: Copy httpd.conf in host
  template: 
    src: httpd.conf.j2
    dest: "{{ httpd_opt }}/conf/httpd.conf"

# Create index.html page
- name: Create index page
  template:
    src: "{{ httpd_default_index_html_template }}"
    dest: "{{ httpd_opt }}/htdocs/index.html"

## Thredds's configuration
- name: Create thredds directory in htdocs directory
  file:
    dest: "{{ httpd_opt }}/htdocs/thredds"
    state: directory

- name: Create thredds static configuration files (images, css)
  copy:
    src: "{{ item }}"
    dest: "{{ httpd_opt }}/htdocs/thredds/{{ item }}"
  with_items:
    - folder.gif
    - tdsCat.css
    - threddsIcon.gif

- name: Create thredds static configuration - catalog.html
  template:
     src: catalog.html.j2
     dest: "{{ httpd_opt }}/htdocs/thredds/catalog.html"

- name: Create thredds static configuration - catalog.xml
  template:
    src: catalog.xml.j2
    dest: "{{ httpd_opt }}/htdocs/thredds/catalog.xml"

- name: Create thredds static configuration - serverInfo.html
  template:
    src: serverInfo.html.j2
    dest: "{{ httpd_opt }}/htdocs/thredds/serverInfo.html"

- name: Create configuration module for thredds
  template:
    src: thredds.conf.j2
    dest: "{{ httpd_opt }}/{{ conf_modules }}/thredds.conf"

## Add scripts for adding/removing GWS and TDS instances automatically
- name: Add scripts for adding/removing GWS and TDS instances automatically
  copy:
    src: "{{ item }}"
    dest: "{{ services_prefix }}/{{ item }}"
  with_items:
    - update_GWS_proxy.yml
    - update_TDS_instances.yml

- name: Add update_proxy.py script
  template:
    src: update_proxy.py.j2
    dest: "{{ services_prefix }}/update_proxy.py"

## Control httpd with supervisord
# Create httpd configuration file in supervisord
- name: Create httpd supervisord configuration
  template:
    src: httpd_supervisord.conf.j2
    dest: "{{ supervisor_programs }}/httpd.conf"
  register: httpd_conf_supervisord

# Reread supervisord configuration and add httpd program to supervisord
- name: Add httpd program to supervisord
  supervisorctl:
    name: httpd
    state: present
    supervisorctl_path: "{{ virtualenv_home }}/bin/supervisorctl"
    config: "{{ supervisor_etc }}/supervisord.conf"
    username: "{{ user }}"
    password: "{{ password }}"
    server_url: "http://localhost:{{ supervisor_port }}"
  when: httpd_conf_supervisord.changed

- name: Create script to detect changes in httpd configuration
  template:
    src: detect_changes.py.j2
    dest: "{{ supervisor_programs }}/detect_changes.py"
    mode: 0775

- name: Create event listener for detect changes in httpd/opt/conf/ directory
  template:
     src: detect_httpd_conf.conf.j2
     dest: "{{ supervisor_programs }}/httpd_conf.conf"
  vars: 
    event_name: httpd_conf
    md5_filename: httpd_conf
    control_directory: "{{ httpd_opt }}/conf/"
  register: httpd_conf_listener

- name: Add event listener to supervisord
  supervisorctl:
    name: httpd_conf
    state: present
    supervisorctl_path: "{{ virtualenv_home }}/bin/supervisorctl"
    config: "{{ supervisor_etc }}/supervisord.conf"
    username: "{{ user }}"
    password: "{{ password }}"
    server_url: "http://localhost:{{ supervisor_port }}"
  when: httpd_conf_listener.changed

- name: Create event listener for detect changes in httpd/opt/conf.d/ directory
  template:
     src: detect_httpd_conf.conf.j2
     dest: "{{ supervisor_programs }}/httpd_conf_modules.conf"
  vars: 
    event_name: httpd_conf_modules
    md5_filename: httpd_conf_modules
    control_directory: "{{ httpd_opt }}/conf.d/"
  register: httpd_conf_modules_listener

- name: Add event listener to supervisord
  supervisorctl:
    name: httpd_conf_modules
    state: present
    supervisorctl_path: "{{ virtualenv_home }}/bin/supervisorctl"
    config: "{{ supervisor_etc }}/supervisord.conf"
    username: "{{ user }}"
    password: "{{ password }}"
    server_url: "http://localhost:{{ supervisor_port }}"
  when: httpd_conf_modules_listener.changed

- name: Install ansible in proxy 
  pip:
    name: ansible
    version: 2.2.1.0
    virtualenv: "{{ virtualenv_home }}"
    virtualenv_site_packages: yes

- name: Install docopt in proxy 
  pip:
    name: docopt
    version: 0.6.2
    virtualenv: "{{ virtualenv_home }}"
    virtualenv_site_packages: yes