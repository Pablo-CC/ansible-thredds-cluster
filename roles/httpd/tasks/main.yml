#Check if the service is installed in remote host
## Install HTTPD
# From RedHat repository
- include: install_httpd_RedHat.yml
  when: httpd_install_from_source == false

# From source
- include: install_httpd_from_source.yml
  when: httpd_install_from_source == true

- name: Insert HTTPD_HOME in .bashrc 
  lineinfile:
    dest: "~/.bashrc"
    line: "export $HTTPD_HOME={{ httpd_home | default(httpd_home_default) }}"

# Create conf.d directory in httpd_home
- name: Create modules directories
  become: "{{ become_method }}"
  file:
    dest: "{{ item }}"
    state: directory
  with_items:
    - "{{ httpd_home | default(httpd_home_default) }}/conf.d"
    - "{{ httpd_home | default(httpd_home_default) }}/htdocs"

# Create password for admin user
- name: Create password for proxy status web pages
  become: "{{ become_method }}"
  htpasswd:
    path: "{{ httpd_home | default(httpd_home_default) }}/.htpasswd"
    username: "{{ applications.proxy.status.user }}"
    password: "{{ applications.proxy.status.password }}"

- include: "install_{{ load_balancer_module | default(load_balancer_module_default) }}.yml"

- name: Delete httpd_src directory
  become: "{{ become_method }}"
  file:
    dest: "{{ httpd_src }}"
    state: absent

# Create httpd configuration
- name: Copy httpd.conf in host
  become: "{{ become_method }}"
  template: 
    src: httpd.conf.j2
    dest: "{{ httpd_home | default(httpd_home_default) }}/conf/httpd.conf"
  notify: start httpd

# Create index.html page
- name: Create index page
  become: "{{ become_method }}"
  template:
    src: "{{ httpd_default_index_html_template }}"
    dest: "{{ httpd_home | default(httpd_home_default) }}/htdocs/index.html"

## Thredds's configuration
- name: Create thredds directory in htdocs directory
  become: "{{ become_method }}"
  file:
    dest: "{{ httpd_home | default(httpd_home_default) }}/htdocs/thredds"
    state: directory

- name: Create thredds static configuration files (images, css)
  become: "{{ become_method }}"
  copy:
    src: "{{ item }}"
    dest: "{{ httpd_home | default(httpd_home_default) }}/htdocs/thredds/{{ item }}"
  with_items:
    - folder.gif
    - tdsCat.css
    - threddsIcon.gif

- name: Create thredds static configuration - catalog.html
  become: "{{ become_method }}"
  template:
     src: catalog.html.j2
     dest: "{{ httpd_home | default(httpd_home_default) }}/htdocs/thredds/catalog.html"

- name: Create thredds static configuration - catalog.xml
  become: "{{ become_method }}"
  template:
    src: catalog.xml.j2
    dest: "{{ httpd_home | default(httpd_home_default) }}/htdocs/thredds/catalog.xml"

- name: Create thredds static configuration - serverInfo.html
  become: "{{ become_method }}"
  template:
    src: serverInfo.html.j2
    dest: "{{ httpd_home | default(httpd_home_default) }}/htdocs/thredds/serverInfo.html"

- name: Create configuration module for thredds
  become: "{{ become_method }}"
  template:
    src: thredds.conf.j2
    dest: "{{ httpd_home | default(httpd_home_default) }}/conf.d/thredds.conf"
  notify: reload httpd

## Add scripts for adding/removing GWS and TDS instances automatically
- name: Add scripts for adding/removing GWS and TDS instances automatically
  become: "{{ become_method }}"
  copy:
    src: "{{ item.local }}"
    dest: "{{ ansible_env.HOME }}/{{ item.remote }}"
  with_items:
    - { local: "update_proxy_{{ load_balancer_module | default(load_balancer_module_default) }}_GWS.yml", remote: "update_proxy_GWS.yml"} 
    - { local: "update_proxy_{{ load_balancer_module | default(load_balancer_module_default) }}_TDS.yml", remote: "update_proxy_TDS.yml"}

- name: Add update_proxy.py script
  become: "{{ become_method }}"
  template:
    src: update_proxy.py.j2
    dest: "{{ ansible_env.HOME }}/update_proxy.py"
    mode: "u+rwx"

- name: Create HTTPD configuration in the system
  include: system_configuration.yml
  when: httpd_system == true

- name: Create HTTPD configuration in the supervisord
  include: supervisord_configuration.yml
  when: httpd_system == false