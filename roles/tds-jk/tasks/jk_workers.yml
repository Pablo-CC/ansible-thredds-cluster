- name: Add workers in the collection balancer
  blockinfile:
    marker: "# {mark} worker_{{ ansible_hostname }}_{{ item.port }}"
    path: "{{ hostvars[item.gateway].mod_jk_conf }}/mod_jk.workers"
    block: |
      worker.{{ worker_name }}.type=ajp13
      worker.{{ worker_name }}.host={{ item.host | default(ansible_hostname) }}
      worker.{{ worker_name }}.port={{ item.port }}
  delegate_to: "{{ item.gateway }}"
  vars:
    ansible_become: "{{ hostvars[item.gateway].ansible_become | default(False) }}" # depends on how httpd was installed
    worker_name: "{{ ansible_hostname ~ '_' ~ item.port }}"
  with_items: "{{ replicas }}"

- name: Add workers in the restricted balancer
  lineinfile:
    path: "{{ hostvars[item.gateway].mod_jk_conf }}/mod_jk.workers"
    insertafter: "# END restrictedAccess"
    line: worker.restrictedAccess.balance_workers={{ worker_name }}
  delegate_to: "{{ item.gateway }}"
  vars:
    ansible_become: "{{ hostvars[item.gateway].ansible_become | default(False) }}" # depends on how httpd was installed
    worker_name: "{{ ansible_hostname ~ '_' ~ item.port }}"
  with_items: "{{ replicas }}"

- name: Add workers to the load balancer
  lineinfile:
    dest: "{{ hostvars[item.gateway].mod_jk_conf }}/mod_jk.workers"
    state: present
    line: 'worker.COLLECTION_{{ item.collection.path | replace("/", "-") }}.balance_workers={{ worker_name }}'
  delegate_to: "{{ item.gateway }}"
  vars:
    ansible_become: "{{ hostvars[item.gateway].ansible_become | default(False) }}" # depends on how httpd was installed
    worker_name: "{{ ansible_hostname ~ '_' ~ item.port }}"
  with_items: "{{ replicas }}"
