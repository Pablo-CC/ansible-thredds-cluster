- name: Provision proxy
  hosts: spock
  tasks:
    - yum:
        name: python-passlib
        
- hosts: spock
  vars:
    esg_root: "esgcet"

    # Vars for tds-gateway
    httpd_server_root: /etc/httpd
    mod_jk_configure: --with-apxs=/usr/sbin/apxs
    mod_jk_conf_dir: "/etc/httpd/conf.d" # Mandatory
    mod_jk_shm: "/etc/httpd/logs/mod_jk.shm" # Mandatory
    mod_jk_log: "/etc/httpd/logs/mod_jk.log" # Mandatory
    httpd_conf: "{{ httpd_server_root }}/conf/httpd.conf" # Mandatory
    mod_jk_src: /opt/mod_jk
  vars_files:
    - secret.yml
    - deployment.yml
  roles:
    - role: tds-gateway
#      httpd_port: 80
  tasks:
    # It should be removed but used in tomcat role instance.yml:46
#    - set_fact: httpd_confd="{{ httpd_confd }}"

# Include cluster conf into esgf-httpd.conf
    - name: Include mod_jk.conf in esgf-httpd.conf
      blockinfile:
        path: "/etc/httpd/conf/esgf-httpd.conf"
        insertbefore: 'VirtualHost \*:80'
        marker: "# {mark} Include jk"
        block: |
          Include /etc/httpd/conf.d/mod_jk.conf
          JkMountCopy All

# Change directory of mod_jk.shm
    - name: Create directory for mod_jk.shm
      file: path="/var/run/mod_jk" state=directory

    - name: Change directory of JkShmFile in mod_jk.conf
      replace:
        path: "{{ mod_jk_conf_dir }}/mod_jk.conf"
        regexp: "JkShmFile .*"
        replace: "JkShmFile /var/run/mod_jk/mod_jk.shm"

# Indicate resources served by esgf's tds
    - name: Comment ProxyPass /thredds in esgf-httpd.conf
      replace:
        path: "/etc/httpd/conf/esgf-httpd.conf"
        regexp: "(ProxyPass /thredds\tajp://localhost:8223/thredds)"
        replace: '#\1'

    - name: Add ProxyPassMatch directives to esgf-httpd.conf
      blockinfile:
        path: "/etc/httpd/conf/esgf-httpd.conf"
        insertafter: '{{ item.string }}'
        marker: "# {mark} ProxyPassMatch {{ item.mark }}"
        block: |
          ProxyPassMatch ^/thredds/([^/]*)/{{ esg_root }}/(.*) ajp://localhost:8223/thredds/$1/{{ esg_root }}/$2
          ProxyPassMatch ^/thredds/catalog/([^/]*)$ ajp://localhost:8223/thredds/catalog/$1
          ProxyPassMatch ^/thredds/([^/]*)$ ajp://localhost:8223/thredds/$1
          ProxyPassMatch ^/thredds/js/(.*)$ ajp://localhost:8223/thredds/js/$1
          ProxyPassMatch ^/thredds/style/(.*)$ ajp://localhost:8223/thredds/style/$1
      with_items:
        - { string: 'VirtualHost \*:80', mark: 80 }
        - { string: 'VirtualHost \*:443', mark: 443 }

# Allow insecure ncss js resources
    - name: Allow insecure ncss js resources in esgf tomcat
      lineinfile:
        path: "/usr/local/tomcat/webapps/thredds/WEB-INF/web.xml"
        regexp: '<param-value>.*\(html\|xml\|css\|gif\|png\|jpg\|pdf\|asp\).*</param-value>'
        state: absent

    - lineinfile:
        path: "/usr/local/tomcat/webapps/thredds/WEB-INF/web.xml"
        line: '<param-value>"[^?]*/thredds/$","[^?]*catalog\.html;jsessionid=.*","[^?]*((/admin/)(.*)|(/remoteCatalogService\?.*)|(?&lt;=\.(html|xml|css|gif|png|jpg|pdf|asp|js))(\?.*)?)"</param-value>'
        state: present
        insertafter: '<param-name>authenticationNotRequiredPatterns</param-name>'

# Add dataset_root
    - name: Create esgf directories dataset_roots
      file:
        state: directory
        path: "{{ item }}"
      with_items:
        - /esg/cordex
        - /esg/content/thredds/{{ esg_root }}
        
    - lineinfile:
        path: "/esg/config/esgcet/esg.ini"
        line: "\t{{ esg_root }} | /esg/cordex"
        insertafter: "\tesg_dataroot | /esg/data"

    - lineinfile:
        path: "/esg/config/esgcet/esg.ini"
        line: "\tcordex | CORDEX Project | 4"
        insertafter: "\ttest | Test Project | 3"

    - replace:
        path: "/esg/config/esgcet/esg.ini"
        regexp: "thredds_root = /esg/content/thredds/esgcet"
        replace: "thredds_root = /esg/content/thredds/{{ esg_root }}"

    - replace:
        path: "/esg/config/esgcet/esg.ini"
        regexp: "thredds_url = http://{{ ansible_nodename }}/thredds/catalog/esgcet"
        replace: "thredds_url = http://{{ ansible_nodename }}/thredds/catalog/{{ esg_root }}"

    # udg-tds should be dynamic? - maybe a var/group-var in this playbook
    - lineinfile:
        path: "/esg/content/thredds/catalog.xml"
        line: '<catalogRef name="User Data Gateway Root Catalog" xlink:title="User Data Gateway catalog" xlink:href="udg-tds/catalog.xml"/>'
        insertbefore: "</catalog>"

    - replace:
        regexp: 'xlink:href="esgcet/catalog.xml"'
        replace: 'xlink:href="{{ esg_root }}/catalog.xml"'
        path: "/esg/content/thredds/catalog.xml"

    # copy esg.cordex.ini
    - copy:
        src: esg.cordex.ini
        dest: /esg/config/esgcet/esg.cordex.ini

    # add jna_path to esg_functions
    - lineinfile:
        path: "/usr/local/bin/esg-functions"
        line: -Djna.library.path=/usr/local/conda/envs/esgf-pub/lib/ \
        insertbefore: '        -Djava.awt.headless=true \\'
        
    - shell: /usr/local/conda/envs/esgf-pub/bin/esginitialize -c
      args:
        executable: /bin/bash
      environment:
        UVCDAT_ANONYMOUS_LOG: "False"
        
- hosts: backend
  vars:
    proxy_name: "spock.meteo.unican.es" # where is this used?
    derby_db_download_url: "http://archive.apache.org/dist/db/derby/db-derby-10.12.1.1/db-derby-10.12.1.1-lib.tar.gz"
    derby_db_filename: db-derby-10.12.1.1-lib.tar.gz
    
    # Miniconda variables
    miniconda_python: 2
    miniconda_prefix: "{{ tomcat_catalina_home }}/miniconda2"
    miniconda_env:
      name: udg
      dependencies:
        - libnetcdf=4.4.1
        - supervisor=3.1.3

    # TDS variables
    tds_download_url: "http://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/edu/ucar/tds/ESGF-5.0.1/tds-ESGF-5.0.1.war"
    tds_version: "ESGF-5.0.1"
    tds_filename: "tds-esgf.war"
    venv_home: "{{ miniconda_prefix }}/envs/{{ miniconda_env.name }}"
  vars_files:
    - secret.yml
    - deployment.yml
  roles:
    - role: supervisord-conda
    - role: tds
  tasks:

# Set SSL in applicationContext.xml
    - replace:
        regexp: '<property name="useSSL" value="false"/>'
        replace: '<property name="useSSL" value="true"/>'
        path: "{{ tomcat_instances_path }}/{{ item.name }}/webapps/thredds/WEB-INF/applicationContext.xml"
      with_items: "{{ tds_instances }}"

    - replace:
        regexp: '<property name="sslPort" value="8443"/>'
        replace: '<property name="sslPort" value="443"/>'
        path: "{{ tomcat_instances_path }}/{{ item.name }}/webapps/thredds/WEB-INF/applicationContext.xml"
      with_items: "{{ tds_instances }}"

# Use custom thredds authorizer
    - copy:
        src: TdsClusterAuthorizer.class
        dest: "{{ tomcat_instances_path }}/{{ item.name }}/webapps/thredds/WEB-INF/classes/thredds/servlet/restrict/TdsClusterAuthorizer.class"
      with_items: "{{ tds_instances }}"

    - replace:
        regexp: '<bean id="restrictedDatasetAuthorizer" class="thredds.servlet.restrict.TomcatAuthorizer">'
        replace: '<bean id="restrictedDatasetAuthorizer" class="thredds.servlet.restrict.TdsClusterAuthorizer">'
        path: "{{ tomcat_instances_path }}/{{ item.name }}/webapps/thredds/WEB-INF/applicationContext.xml"
      with_items: "{{ tds_instances }}"

# It is necessary to remove the proxyPort added by the role from the tomcat connector
    - replace:
        path: '{{ tomcat_instances_path }}/{{ item.name }}/conf/server.xml'
        regexp: '<Connector port="18009" protocol="AJP/1.3" proxyName="{{ proxy_name }}" proxyPort="80" />'
        replace: '<Connector port="18009" protocol="AJP/1.3" proxyName="{{ proxy_name }}" />'
      with_items: "{{ tds_instances }}"

# Esto debería ser lineinfile o blockinfile, lo tengo así por quitar los with_first_found      
    - template:
        src: server.xml.j2
        dest: "{{ tomcat_instances_path }}/{{ instance.name }}/conf/server.xml"
      with_items: "{{ tds_instances }}"
      loop_control:
        loop_var: instance

    - copy:
        src: context.xml
        dest: "{{ tomcat_instances_path }}/{{ item.name }}/conf/context.xml"
      with_items: "{{ tds_instances }}"

# Copy derby-db client jar
    - name: Download derby db
      run_once: True
      local_action: get_url
      args:
        url: "{{ derby_db_download_url }}"
        dest: "/tmp/{{ derby_db_filename }}"

    - name: Unarchive derby db in remote host
      unarchive:
        src: "/tmp/{{ derby_db_filename }}"
        dest: "{{ tomcat_catalina_home }}"
        extra_opts:
          --strip-components=1

# TDS Services management
    - name: restart TDS instances
      supervisorctl:
        name: "{{ item.name }}"
        state: restarted
        supervisorctl_path: "{{ venv_home }}/bin/supervisorctl"
        username: "{{ applications.supervisord.user }}"
        password: "{{ applications.supervisord.password }}"
      with_items:
          - "{{ tds_instances }}"
      tags:
        - restart
        - update_catalogs
