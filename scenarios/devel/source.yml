- name: Provision hosts
  hosts: all
  become: True
  tasks:
    - yum:
        name: epel-release

    - yum:
        name: "{{ item }}"
        state: present
      with_items:
        - "@Development tools"
        - python-passlib
        - net-tools # apt?
        - unzip
        - vim

- hosts: proxies
  vars:
    venv_home: "{{ httpd_server_root }}/virtualenv"
    httpd_server_root: "{{ ansible_env.HOME }}/httpd"
    httpd_port: 8080
    mod_jk_status_user: proxy
    mod_jk_status_passwd: proxy
    mod_jk_configure: --prefix={{ httpd_server_root }}/modules --with-apxs={{ httpd_server_root }}/bin/apxs
  roles:
    - role: virtualenv
    - role: supervisord
    - role: httpd
    - role: jk-gateway-tds

- hosts: backend
  vars:
    miniconda_python: 2
    miniconda_prefix: "{{ ansible_env.HOME }}/miniconda2"
    miniconda_env:
      name: udg
      dependencies:
        - libnetcdf=4.4.1
        - supervisor=3.1.3

  roles:
    - role: virtualenv-conda
    - role: supervisord
    - role: tds-jk

  tasks:
    - include_tasks: ../../utils/test-authentication.yml
      vars:
        instances: "{{ tds_instances }}"

    - name: restart httpd
      supervisorctl:
        name: httpd
        state: restarted
        username: "{{ supervisord_user | default(omit) }}"
        password: "{{ supervisord_password | default(omit) }}"
        supervisorctl_path: "{{ hostvars[item].venv_home }}/bin/supervisorctl"
      run_once: True
      delegate_to: "{{ item }}"
      with_items: "{{ groups.proxies }}"
      tags: restart

    - name: restart tds instances
      supervisorctl:
        name: "{{ item.name }}"
        state: restarted
        username: "{{ supervisord_user | default(omit) }}"
        password: "{{ supervisord_password | default(omit) }}"
        supervisorctl_path: "{{ venv_home }}/bin/supervisorctl"
      with_items: "{{ tds_instances }}"
      tags: ["restart","update_catalogs"]

# - hosts: hostA
#   roles:
#     - role: logstash
#       logstash_home: "{{ ansible_env.HOME }}/tomcat"
#       logstash_pipeline: "pipeline.conf"
